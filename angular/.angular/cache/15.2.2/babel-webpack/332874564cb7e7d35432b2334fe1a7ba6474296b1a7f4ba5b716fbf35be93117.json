{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CocheModule } from 'src/app/models/coche/coche.module';\n// Importamos el servicio de coches para que se pueda usar en el modelo de html\nimport { CocheService } from '../../services/coche.service';\n// Decorador de la clase\nlet CochesComponent = class CochesComponent {\n  constructor(cocheService) {\n    this.cocheService = cocheService;\n  }\n  ngOnInit() {\n    console.log(\"iniciado\");\n    this.getCoches();\n    // console.log( this.getCoches());\n  }\n  // // Definimos la funcion que va a manejar el formulario\n  addCoche(form) {\n    if (this.comprobarCoche(this.cocheService.selectedCoche)) {\n      // En caso de que existe el id lo actualizamos\n      if (form.value._id) {\n        console.log(\"Editando coche\");\n        this.cocheService.putCoche(form.value).subscribe(res => {\n          this.resetForm(form);\n          M.toast({\n            html: \"Edit Succesfully\"\n          });\n          this.getCoches();\n        });\n      } else {\n        // En caso de que no exista el id lo eliminamos\n        console.log(form.value);\n        this.cocheService.postCoche(form.value)\n        // Con subscrive obtenemos la respuesta del servidor.\n        .subscribe(res => {\n          console.log(res);\n          this.resetForm(form); // reseteamos el formulario \n          M.toast({\n            html: 'Save Succesfully'\n          });\n          this.getCoches();\n        });\n      }\n    }\n  }\n  getCoches() {\n    this.cocheService.getCoches().subscribe(res => {\n      this.cocheService.coches = res;\n      console.log(res);\n    });\n  }\n  editCoche(coche) {\n    this.cocheService.selectedCoche = coche;\n  }\n  deleteCoche(_id) {\n    if (confirm(\"¿Estas seguro de que quieres eliminarlo?\")) {\n      this.cocheService.deleteCoche(_id).subscribe(res => {\n        console.log(res);\n        this.getCoches();\n      });\n    }\n  }\n  resetForm(form) {\n    if (form) {\n      form.reset();\n      this.cocheService.selectedCoche = new CocheModule();\n    }\n  }\n  findByMarca(marca) {\n    this.cocheService.findByMarca(marca).subscribe(res => {\n      this.cocheService.coches = res;\n      console.log(res);\n    });\n  }\n  comprobarCoche(coche) {\n    const carrocerias = ['Sedán', 'Berlina', 'SUV', 'Coupé', 'Cabrio', 'Familiar', 'Compacto', 'Monovolumen', 'Furgoneta', 'Furgon', 'Autocaravana', 'Pick Up', 'Clasico', 'Super deportivo'];\n    const propulsiones = ['Electrico', 'Diesel', 'Hibrido', 'Hidrogeno'];\n    const tracciones = ['FWD', 'RWD', 'AWD', '4WD', '4x4'];\n    if (carrocerias.includes(coche.carroceria) && propulsiones.includes(coche.propulsion) && tracciones.includes(coche.traccion) && coche.marca != null && coche.marca != \"\") {\n      console.log(\"Parametros bien\");\n      return true;\n    } else {\n      M.toast({\n        html: \"Error faltan valores\"\n      });\n      console.log(\"Faltan datos indispensables\");\n      return false;\n    }\n  }\n};\nCochesComponent = __decorate([Component({\n  selector: 'app-coches',\n  templateUrl: './coches.component.html',\n  styleUrls: ['./coches.component.css'],\n  providers: [CocheService]\n})\n// Exportamos la clase y la definimos\n], CochesComponent);\nexport { CochesComponent };","map":{"version":3,"mappings":"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","names":["Component","CocheModule","CocheService","CochesComponent","constructor","cocheService","ngOnInit","console","log","getCoches","addCoche","form","comprobarCoche","selectedCoche","value","_id","putCoche","subscribe","res","resetForm","M","toast","html","postCoche","coches","editCoche","coche","deleteCoche","confirm","reset","findByMarca","marca","carrocerias","propulsiones","tracciones","includes","carroceria","propulsion","traccion","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["/home/pio/Documentos/Documentos_pablo/uni/3_curso/2do.cuatri/ast/practica/mean_curso/angular/src/app/components/coches/coches.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {  NgForm } from '@angular/forms'; // Necesario para trabajar con formularios\nimport { CocheModule } from 'src/app/models/coche/coche.module';\n\n// Importamos el servicio de coches para que se pueda usar en el modelo de html\nimport { CocheService } from '../../services/coche.service';\n\ndeclare var M: any; // Esto es de materialize para enviar alertas a los usuarios\n\n\n// Decorador de la clase\n@Component({\n  selector: 'app-coches', // Definimos como llamar al componente desde html\n  templateUrl: './coches.component.html', //url a la pagina html del componente\n  styleUrls: ['./coches.component.css'], // url a la pagina de estilos del componente\n  providers: [CocheService]\n})\n\n// Exportamos la clase y la definimos\nexport class CochesComponent {\n\n  // Creeamos el constructor de la clase y iniciamos el servicio de coche.\n  cocheService: CocheService;\n  constructor( cocheService: CocheService){\n    this.cocheService = cocheService;\n  }\n  \n\n  ngOnInit(){\n    console.log(\"iniciado\");\n    \n    this.getCoches();\n\n    // console.log( this.getCoches());\n    \n  }\n\n  // // Definimos la funcion que va a manejar el formulario\n  addCoche(form:NgForm){\n    if (this.comprobarCoche(this.cocheService.selectedCoche)){\n\n      // En caso de que existe el id lo actualizamos\n      if (form.value._id){\n        console.log(\"Editando coche\");\n        this.cocheService.putCoche(form.value)\n          .subscribe(res =>{\n            this.resetForm(form);\n            M.toast({html: \"Edit Succesfully\"});\n            this.getCoches();\n            \n        })\n      } else{\n        // En caso de que no exista el id lo eliminamos\n        console.log(form.value);\n        this.cocheService.postCoche(form.value)\n        \n        // Con subscrive obtenemos la respuesta del servidor.\n          .subscribe(res => {\n            console.log(res)\n            this.resetForm(form); // reseteamos el formulario \n            M.toast({html: 'Save Succesfully'});\n            this.getCoches();\n          })\n      }\n    }\n  }\n\n  getCoches(){\n    this.cocheService.getCoches()\n      .subscribe(res =>{\n        this.cocheService.coches = res as CocheModule[];\n        console.log(res);\n      })\n  }\n\n  \n  editCoche(coche: CocheModule){\n    this.cocheService.selectedCoche = coche;\n  }\n\n  deleteCoche(_id: string){\n\n    if(confirm(\"¿Estas seguro de que quieres eliminarlo?\")){\n      this.cocheService.deleteCoche(_id)\n      .subscribe(res => {\n        console.log(res);\n        this.getCoches();\n      })\n    }\n  }\n\n  resetForm(form?: NgForm){\n    if (form) {\n      form.reset();\n      this.cocheService.selectedCoche = new CocheModule();\n    }\n  }\n  \n  findByMarca(marca: string){\n    this.cocheService.findByMarca(marca)\n      .subscribe(res =>{\n        this.cocheService.coches = res as CocheModule[];\n        console.log(res);\n      })\n  }\n\n  comprobarCoche(coche: CocheModule) {\n    const carrocerias = ['Sedán', 'Berlina', 'SUV', 'Coupé', 'Cabrio', 'Familiar', 'Compacto', 'Monovolumen','Furgoneta','Furgon','Autocaravana', 'Pick Up', 'Clasico', 'Super deportivo'];\n    const propulsiones = ['Electrico', 'Diesel', 'Hibrido', 'Hidrogeno'];\n    const tracciones = ['FWD', 'RWD', 'AWD', '4WD', '4x4'];\n\n    if (carrocerias.includes(coche.carroceria) && propulsiones.includes(coche.propulsion) && tracciones.includes(coche.traccion) && coche.marca != null && coche.marca != \"\") {\n      console.log(\"Parametros bien\");\n      return true;\n    }else{\n      M.toast({html: \"Error faltan valores\"});\n      console.log(\"Faltan datos indispensables\");\n      return false;\n    }\n    \n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}